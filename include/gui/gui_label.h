#ifndef LABEL_H
#define LABEL_H

#include <string>
#include <cstdlib>
#include <SDL2/SDL_ttf.h>
#include <iostream>

#include "gui_element.h"

namespace GUI
{

/// \brief This struct contains variables for SDL that will be the same for all labels, which we therefore won't want to send to the constructor individually every time.
typedef struct
{
    /// \brief A pointer to the SDL rendering context.
    SDL_Renderer *ren;

    /// \brief A pointer to a font that the SDL TTF library uses.
    TTF_Font *font;

    /// \brief The colour of the text.
    SDL_Color colour;
} LabelFormat;

/// \brief A simple line of text constructed using SDL's TTF library that can be moved around as with other visual elements.
class Label : public Element
{
public:
    /// \brief The label constructor. This probably won't need to be changed much since it is only called automatically by the ElementMaker class.
    /// \param _ren A pointer to the SDL rendering context.
    /// \param _tex A pointer to the SDL texture to use - generated by ElementMaker.
    /// \param _srcRect An SDL rectangle that covers the texture - for labels it is assumed the whole texture will be renderered 1:1.
    /// \param _orientation An enum specifying which edge of the screen this label should face.
    /// \param _origin An SDL point specifying the exact location this label should be created. Making sure this is in the centre of _destRect is handled by the ElementMaker
    /// class.
    /// \param _lifetime How many update() calls this element should last until it is destroyed. Passing 0 makes this lifetime indefinite.
    /// \return A Label object.
    Label(SDL_Renderer *_ren,
          SDL_Texture *_tex,
          const SDL_Rect &_rect,
          const Orientation &_orient,
          const SDL_Point &_origin,
          const int &_lifetime);
};

}

#endif // LABEL_H
